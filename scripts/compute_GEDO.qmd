---
title: "GEDO - PRECISESADS"
format: html
editor: visual
date: "`r format(Sys.Date(), '%d %B %Y')`"
execute:
  echo: true
  warning: false
  message: false
---

# 1. Packages and functions

```{r packages and functions}

folder_script_to_source = "/home/clem/GEDO/R/"
source(file = paste0(folder_script_to_source,"GEDO.R"))
source(file = paste0(folder_script_to_source,"functions_article.R"))

detach_all_packages()
packages_list = c("data.table", "FNN", "magrittr", "tryCatchLog","rlist",
                  "igraph", "pbapply","rgl","rdist","msigdbr","msigdbdf",
                  "future.apply","dbscan", "progressr","pheatmap",
                  "gridExtra","MASS","plotly","ggplot2", "patchwork",
                  "caret","randomForest", "dplyr", "tidyr","parallel", "pROC", "ggpubr","fpc","cluster","phateR","reticulate", "devtools", "bench","RANN")

install_and_load(packages_list)
```

# 2. Loading data

```{r loading data}
folder_to_data ="/home/clem/GEDO/data/"
PS_brutes <- readRDS(paste0(folder_to_data,"PS_brutes.rds"))
rna_seq_data = readRDS(paste0(folder_to_data, "bulk_rna_seq_final_data_batch_corrected_high_cv_scaled.rds"))
rna_seq_data[, SAMPLING_OMIC_NUMBER:=paste0("N",SAMPLING_OMIC_NUMBER)]
rna_seq_data[PS_brutes, diag := i.DIAGNOSIS_DISEASE_AT_ONSET, on="SAMPLING_OMIC_NUMBER"]
rna_seq_data[PS_brutes, control:=i.DIAGNOSIS_ARM, on="SAMPLING_OMIC_NUMBER"]
rna_seq_data[control=="Control", diag:="Control"]
rna_seq_data=rna_seq_data[,diag:=factor(diag, levels = c("Control","SjS"))]
rna_seq_data=rna_seq_data[diag %in% c("Control","SjS")]
rna_seq_data[diag=="SjS",diag:="SjD"]
diag = rna_seq_data$diag
PS_brutes[,diag:=DIAGNOSIS_DISEASE_AT_ONSET]
PS_brutes[DIAGNOSIS_ARM=="Control", diag:="Control"]
diag=factor(diag,levels=c("SjD","Control"))
omic_id = rna_seq_data$SAMPLING_OMIC_NUMBER
ifn_score_table=data.table(SAMPLING_OMIC_NUMBER=omic_id)
ifn_score_table[PS_brutes, IFN_score := i.EXPRESSION_PRECISESADS_IFN, on="SAMPLING_OMIC_NUMBER"]
ifn_score=ifn_score_table$IFN_score
rna_seq_data[, diag:=NULL][, SAMPLING_OMIC_NUMBER:=NULL][, control:=NULL]
```

# 3. Computing GEDO

## 3.1. Graph G with euclidean distances

```{r gedo}
folder_for_res = "/home/clem/GEDO/results/"
num_cores=5

if(file.exists(paste0(folder_for_res, "gedo_obj.rds"))){
  gedo_obj = readRDS(paste0(folder_for_res, "gedo_obj.rds"))
}else{
gedo_obj = gedo(data = rna_seq_data, diag = diag, reference_group = "Control",
            category = "C7",subcategory = "IMMUNESIGDB",k_lof = 30,
            core_pct = 0.9, k_graph = 15, dim_reduc_method="none", num_cores=num_cores,
            distance="euclidean")

saveRDS(gedo_obj, file=paste0(folder_for_res, "gedo_obj.rds"))
}
gedo_obj$diag=factor(diag,levels=c("SjD","Control"))
```

## 3.2. Graph G with correlation distances

```{r gedo corr}
if(file.exists(paste0(folder_for_res, "gedo_corr_obj.rds"))){
  gedo_corr_obj = readRDS(paste0(folder_for_res, "gedo_corr_obj.rds"))
}else{
gedo_corr_obj = gedo(data = rna_seq_data, diag = diag, reference_group = "Control",
            category = "C7",subcategory = "IMMUNESIGDB",k_lof = 30,
            core_pct = 0.9, k_graph = 15, dim_reduc_method="none", num_cores=num_cores,
            distance="correlation")

saveRDS(gedo_corr_obj, file=paste0(folder_for_res, "gedo_corr_obj.rds"))
}
gedo_corr_obj$diag=factor(diag,levels=c("SjD","Control"))

```

# 4. Computing UMAP - GEDO

```{r umap_gedo}

if(file.exists(paste0(folder_for_res, "umap_gedo_obj.rds"))){
  umap_gedo_obj = readRDS(paste0(folder_for_res, "umap_gedo_obj.rds"))
}else{
umap_gedo_obj = gedo(data = rna_seq_data, diag = diag, reference_group = "Control",
            category = "C7",subcategory = "IMMUNESIGDB",k_lof = 30,
            core_pct = 0.9, k_graph = 15, dim_reduc_method="umap", ncomp = 10,
            dim_reduc_dist_method = "correlation", num_cores=num_cores,
            distance="euclidean")

saveRDS(umap_gedo_obj, file=paste0(folder_for_res, "umap_gedo_obj.rds"))
}
umap_gedo_obj$diag=factor(diag,levels=c("SjD","Control"))
```

# 5. GEDO functions

## Heatmap of GEDO module matrix :

```{r heatmaps GEDO}

heatmap_pdf_width=8.5
heatmap_pdf_height=8.5
heatmap_png_width=615
heatmap_png_height=615

pointsize=10


pdf(paste0(folder_for_res, "heatmap_gedo.pdf"), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize)
print(heatmap.ifn(gedo_obj = gedo_obj, IFN_score=ifn_score))
dev.off()

png(paste0(folder_for_res, "heatmap_gedo.png"), width = heatmap_png_width, height = heatmap_png_height, pointsize=pointsize)
print(heatmap.ifn(gedo_obj = gedo_obj, IFN_score=ifn_score))
dev.off()

```

IFN score : Z-score of genes PRKR, IFIT1 and IFI44 expression (interferon alpha induced genes)

## Heatmap of GEDOcorr module matrix :

```{r heatmaps GEDO corr}
pdf(paste0(folder_for_res, "heatmap_gedo_corr.pdf")) 
print(heatmap.ifn(gedo_obj = gedo_corr_obj, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize) 
dev.off() 

png(paste0(folder_for_res, "heatmap_gedo_corr.png")) 
print(heatmap.ifn(gedo_obj = gedo_corr_obj, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize) 
dev.off() 
```

IFN score : Z-score of genes PRKR, IFIT1 and IFI44 expression (interferon alpha induced genes)

## Heatmap of UMAP-GEDO module matrix :

```{r heatmap umap gedo}
pdf(paste0(folder_for_res, "heatmap_umap_gedo.pdf"))
print(heatmap.ifn(gedo_obj = umap_gedo_obj, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize)
dev.off()

png(paste0(folder_for_res, "heatmap_umap_gedo.png"))
print(heatmap.ifn(gedo_obj = umap_gedo_obj, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize)
dev.off()

```

IFN score : Z-score of genes PRKR, IFIT1 and IFI44 expression (interferon alpha induced genes)

## AUC of gene modules in GEDO module matrix :

```{r auc gedo}
#| fig.width: 12
#| fig.height: 6
#| fig.align: "center"
auc = gedo.module.auc(gedo_obj)
ggsave(auc$plot_auc, file=paste0(folder_for_res, "auc_gedo.pdf"), width = 15)

```

# 6. Detail of transition score on GSE1740_UNSTIM_VS_IFNA_STIMULATED_MCSF_DERIVED_MACROPHAGE_DN module

```{r detail one module}
#| fig.width: 20
#| fig.height: 10
#| fig.align: "center"
module_name="GSE1740_UNSTIM_VS_IFNA_STIMULATED_MCSF_DERIVED_MACROPHAGE_DN"
plots_module = compute_transition_score(data = rna_seq_data, 
                                        module_name = module_name,
                                        diag = diag, 
                                        reference_group = "Control",
                                        charge_reactome_modules = T,
                                        k_lof = 30,
                                        core_pct = 0.8,
                                        k_graph = 15,
                                        dim_reduc_method="umap",
                                        ncomp=2,
                                        dim_reduc_dist_method="correlation",
                                        distance="euclidean",
                                        do_plot = T, scale_ts=F)
plot=plots_module$combined_plot
print(plot)
ggsave(plot,file=paste0(folder_for_res,"GSE1740_UNSTIM_VS_IFNA_STIMULATED_MCSF_DERIVED_MACROPHAGE_DN.pdf"), width =20, height = 10)
auc(gedo_obj$diag, plots_module$res$TS)
```

UMAP with uwot package in R, k=15, euclidean distances, colored by (A) Status (CTRL or SjD), (B) Controls core points (Ccore: 70% more dense points with Local Outlier Factor (k=30)), (C) SjD core points (Dcore, same method as Controls), (D) Average of geodesic distance with Control core points (ﾏ， (x)), (E) Average of geodesic distance with SjD core points (ﾏ． (x)), (F) Transition score (TS).

## Random example to test for overfitting (gene expression values shuffled) :

```{r overfitting}
#| fig.width: 20
#| fig.height: 10
#| fig.align: "center"
module_name="GSE1740_UNSTIM_VS_IFNA_STIMULATED_MCSF_DERIVED_MACROPHAGE_DN"
plots_module_random = compute_transition_score(data = rna_seq_data, 
                                        module_name = module_name,
                                        diag = diag, 
                                        reference_group = "Control",
                                        k_lof = 35,
                                        core_pct = 0.8,
                                        k_graph = 15,
                                        dim_reduc_method="umap",
                                        ncomp=2,
                                        dim_reduc_dist_method="correlation",
                                        distance="euclidean",
                                        charge_reactome_modules = T,
                                        do_plot = T, scale_ts=F, shuffle = T)
plot_random=plots_module_random$combined_plot
print(plot_random)
ggsave(plot_random,file=paste0(folder_for_res,"random_GSE1740_UNSTIM_VS_IFNA_STIMULATED_MCSF_DERIVED_MACROPHAGE_DN.pdf"), width = 20, height = 10)
auc(gedo_obj$diag, plots_module$res$TS)
```

UMAP with uwot package in R, k=15, euclidean distances, colored by (A) Status (CTRL or SjD), (B) Controls core points (Ccore: 70% more dense points with Local Outlier Factor (k=30)), (C) SjD core points (Dcore, same method as Controls), (D) Average of geodesic distance with Control core points (ﾏ， (x)), (E) Average of geodesic distance with SjD core points (ﾏ． (x)), (F) Transition score (TS).

# 7. Computing module matrix with PCA1

```{r pca1}

if(file.exists(paste0(folder_for_res, "pca1_obj.rds"))){
pca1_module_matrix = readRDS(paste0(folder_for_res, "pca1_obj.rds"))
}else{
pca1_module_matrix = compute_module_matrix(method="pca1", data=rna_seq_data, 
                                           diag=diag, 
                                           reference_group="Control",
                                           category="C7",
                                           subcategory = "IMMUNESIGDB",
                                           num_cores=num_cores)

saveRDS(pca1_module_matrix, file=paste0(folder_for_res, "pca1_obj.rds"))
}

```

# 8. Computing module matrix with mean of z-scores

```{r mean z score}

if(file.exists(paste0(folder_for_res, "mzscore_obj.rds"))){
  mean_z_score_module_matrix=readRDS(paste0(folder_for_res, "mzscore_obj.rds"))
}else{
mean_z_score_module_matrix = compute_module_matrix(method="mean_z_score", data=rna_seq_data, 
                                           diag=diag, 
                                           reference_group="Control",
                                           category="C7",
                                           subcategory = "IMMUNESIGDB",
                                           num_cores=num_cores)

saveRDS(mean_z_score_module_matrix, file=paste0(folder_for_res,"mzscore_obj.rds"))
}
```

# 9. Class prediction performance (SjD vs. CTRL) for each gene module

```{r auc of each module comparison}

#| fig.width: 15
#| fig.height: 7
#| fig.align: "center"
matrix_list = list(GEDO=gedo_obj, GEDOcorr = gedo_corr_obj, UMAP_GEDO=umap_gedo_obj,
                   # PHATE_GEDO=phate_gedo_obj, 
                   PCA1=pca1_module_matrix, MEAN_Z_SCORES=mean_z_score_module_matrix)

res=compute_auc_modules(matrix_list = matrix_list)
plot=res$plot
ggsave(plot,file=paste0(folder_for_res,"module_auc_comparison.pdf"), height = 7, width = 15)
saveRDS(res, file=paste0(folder_for_res, "module_auc_comparison.rds"))
```

AUC analysis of each gene module to classify SjD vs. CTRL.

\(A\) AUC of ImmuneSigDB 4872 gene modules with GEDO, UMAP-GEDO, PCA1 and Mean of z-scores (significance by Wilcoxon test),

\(B\) AUC of gene modules in comparison with GEDO. Red line: x=y line. Blue curve: quantile regression at the median (quantreg package in R, lambda=0.1).

# 10. Module Matrices classification performance (SjD vs. CTRL)

```{r rf and knn}

#| fig.width: 15
#| fig.height: 15
#| fig.align: "center"


if(file.exists(paste0(folder_for_res,"rf_results.rds"))){
  rf_results=readRDS(paste0(folder_for_res,"rf_results.rds"))
}else{
rf_results = compute_prediction_with_ci(model = "rf", k=NULL, k_folds = 10, dt_list=matrix_list, num_cores=num_cores)
saveRDS(rf_results, file=paste0(folder_for_res, "rf_results.rds"))  
}

if(file.exists(paste0(folder_for_res,"knn_results.rds"))){
  knn_results=readRDS(paste0(folder_for_res,"knn_results.rds"))
}else{
knn_results = compute_prediction_with_ci(model = "knn", k=30, k_folds = 10, dt_list=matrix_list, num_cores=num_cores)
saveRDS(knn_results, file=paste0(folder_for_res, "knn_results.rds"))  
}


roc_combined <- rf_results$roc_curves + knn_results$roc_curves + plot_layout(ncol = 2)
  
ggsave(roc_combined,file=paste0(folder_for_res,"rocs_rf_knn.pdf"), width = 15, height = 15)

```

ROC curves of modules matrices to classify SjD vs. CTRL.

\(A\) Prediction with Random Forest (randomForest package in R, with 400 trees and default parameters),

\(B\) Prediction with K-Nearest Neighbor algorithm (caret R package, with k=30)

# 11. Heatmaps of module matrices

## With PCA1 :

```{r heatmaps pca1}

pdf(paste0(folder_for_res, "heatmap_PCA1.pdf"))
print(heatmap.ifn(gedo_obj = pca1_module_matrix, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize)
dev.off()

png(paste0(folder_for_res, "heatmap_PCA1.png"))
print(heatmap.ifn(gedo_obj = pca1_module_matrix, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize)
dev.off()

```

IFN score : Z-score of genes PRKR, IFIT1 and IFI44 expression (interferon alpha induced genes)

## With Mean of Z-scores :

```{r heatmap of meanzscore}
#MEAN z SCORE
pdf(paste0(folder_for_res, "heatmap_mean_z_score.pdf"))
print(heatmap.ifn(gedo_obj = mean_z_score_module_matrix, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize)
dev.off()

png(paste0(folder_for_res, "heatmap_mean_z_score.png"))
print(heatmap.ifn(gedo_obj = mean_z_score_module_matrix, IFN_score=ifn_score), width = heatmap_pdf_width, height = heatmap_pdf_height, pointsize=pointsize)
dev.off()
```

IFN score : Z-score of genes PRKR, IFIT1 and IFI44 expression (interferon alpha induced genes)

# 12. Clustering quality evaluation

```{r clustering quality}
#| fig.width: 15
#| fig.height: 20
#| fig.align: "center"

cl_res = compute_clustering_quality(matrix_list = matrix_list, num_cores=num_cores)
clustering_plot=cl_res$plot

res$boxplot <- res$boxplot + theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
res$combined_subplots <- res$combined_subplots + theme(plot.margin =  unit(c(0, 0, 0, 0), "cm"))
roc_combined <- roc_combined + theme(plot.margin =  unit(c(0, 0, 0, 0), "cm"))
clustering_plot <- clustering_plot + theme(plot.margin =  unit(c(0, 0, 0, 0), "cm"))


spacer <- plot_spacer()

cluster_row <- spacer + clustering_plot + spacer
cluster_row <- cluster_row + plot_layout(widths = c(0.2, 0.6, 0.2))


combined_plot <- 
  res$boxplot /
  spacer / 
  res$combined_subplots /
  spacer / 
  roc_combined /
  spacer / 
  cluster_row +
  plot_layout(heights = c(1, 0, 1, 0, 1, 0, 1))



print(combined_plot)
ggsave(combined_plot,file=paste0(folder_for_res,"module_auc_rocs_rf_knn_clustering.pdf" ), width = 15, height = 16)
```

Clustering quality with Average Silhouette Width (ASW) and Calinski-Harabasz Index (CHI).

Dotted lines represent the mean value of each clustering metric across the number of clusters, computed within each method.

# 13. Enrichment of clinical features in PHATE visualizations

## GEDO :

```{r phate gedo Mm}

#| fig.width: 12
#| fig.height: 6
#| fig.align: "center"
use_python("/usr/bin/python3", required = TRUE)
plot_gedo= plot_phate(data=matrix_list$GEDO$module_matrix, k = 15, meta_data = PS_brutes)
print(plot_gedo)
ggsave(plot_gedo,file=paste0(folder_for_res,"phate_clinical_features_gedo.pdf"), width = 20, height = 10)
knitr::include_graphics(paste0(folder_for_res,"phate_clinical_features_gedo.pdf"))


```

PHATE projection of module matrix obtained with UMAP-GEDO with phateR R package (k=15, euclidean distances), colored by : (A) Status (CTRL vs. SjD), (B) IFN score, (C) Quantification of all SSA autoantibodies, (D) Quantification SSA 52 autoantibodies, (E) Quantification of SSA 60 autoantibodies, (F) Quantification of SSB autoantibodies.

## GEDOcorr :

```{r phate_gedo_corr}

#| fig.width: 12
#| fig.height: 6
#| fig.align: "center"
use_python("/usr/bin/python3", required = TRUE)
plot_gedo_corr= plot_phate(data=matrix_list$GEDOcorr$module_matrix, k = 15, meta_data = PS_brutes)
print(plot_gedo_corr)
ggsave(plot_gedo_corr,file=paste0(folder_for_res,"phate_clinical_features_gedo_corr.pdf"), width = 20, height = 10)
knitr::include_graphics(paste0(folder_for_res,"phate_clinical_features_gedo_corr.pdf"))

```

PHATE projection of module matrix obtained with GEDOcorr with phateR R package (k=15, euclidean distances), colored by : (A) Status (CTRL vs. SjD), (B) IFN score, (C) Quantification of all SSA autoantibodies, (D) Quantification SSA 52 autoantibodies, (E) Quantification of SSA 60 autoantibodies, (F) Quantification of SSB autoantibodies.

## UMAP-GEDO :

```{r phate umap gedo}
#| fig.width: 12
#| fig.height: 6
#| fig.align: "center"
use_python("/usr/bin/python3", required = TRUE)

plot_umap_gedo= plot_phate(data=matrix_list$UMAP_GEDO$module_matrix, k = 15, meta_data = PS_brutes)
print(plot_umap_gedo)
ggsave(plot_umap_gedo,file=paste0(folder_for_res,"phate_clinical_features_umap_gedo.pdf"), width = 20, height = 10)
knitr::include_graphics(paste0(folder_for_res,"phate_clinical_features_umap_gedo.pdf"))

```

PHATE projection of module matrix obtained with UMAP-GEDO with phateR R package (k=15, euclidean distances), colored by : (A) Status (CTRL vs. SjD), (B) IFN score, (C) Quantification of all SSA autoantibodies, (D) Quantification SSA 52 autoantibodies, (E) Quantification of SSA 60 autoantibodies, (F) Quantification of SSB autoantibodies.

## PCA1 :

```{r phate pca 1}

#| fig.width: 12
#| fig.height: 6
#| fig.align: "center"
use_python("/usr/bin/python3", required = TRUE)

plot_pca1= plot_phate(data=matrix_list$PCA1$module_matrix, k = 15, meta_data = PS_brutes)
print(plot_pca1)
ggsave(plot_pca1,file=paste0(folder_for_res,"phate_clinical_features_pca1.pdf"), width = 20, height = 10)
knitr::include_graphics(paste0(folder_for_res,"phate_clinical_features_pca1.pdf"))

```

PHATE projection of module matrix obtained with UMAP-GEDO with phateR R package (k=15, euclidean distances), colored by : (A) Status (CTRL vs. SjD), (B) IFN score, (C) Quantification of all SSA autoantibodies, (D) Quantification SSA 52 autoantibodies, (E) Quantification of SSA 60 autoantibodies, (F) Quantification of SSB autoantibodies.

## MEAN OF Z-SCORES :

```{r phate meanzscore}


#| fig.width: 12
#| fig.height: 6
#| fig.align: "center"
use_python("/usr/bin/python3", required = TRUE)
plot_mean_zscore= plot_phate(data=matrix_list$MEAN_Z_SCORES$module_matrix, k = 15, meta_data = PS_brutes)
print(plot_mean_zscore)
ggsave(plot_mean_zscore,file=paste0(folder_for_res,"phate_clinical_features_mean_z_score.pdf"), width = 20, height = 10)
knitr::include_graphics(paste0(folder_for_res,"phate_clinical_features_mean_z_score.pdf"))

```

PHATE projection of module matrix obtained with UMAP-GEDO with phateR R package (k=15, euclidean distances), colored by : (A) Status (CTRL vs. SjD), (B) IFN score, (C) Quantification of all SSA autoantibodies, (D) Quantification SSA 52 autoantibodies, (E) Quantification of SSA 60 autoantibodies, (F) Quantification of SSB autoantibodies.

# 14. Benchmark methods (time of running)

```{r benchmark}

if(file.exists(paste0(folder_for_res, "benchmark_time.rds"))){
  bench_result=readRDS(paste0(folder_for_res, "benchmark_time.rds"))
}else{
bench_result = bench::mark(
  
GEDO = gedo(data = rna_seq_data, diag = diag, reference_group = "Control",
            category = "C7",subcategory = "IMMUNESIGDB",k_lof = 30,
            core_pct = 0.9, k_graph = 15, dim_reduc_method="none", num_cores=num_cores,
            distance="euclidean"),
  
GEDOcorr = gedo(data = rna_seq_data, diag = diag, reference_group = "Control",
            category = "C7",subcategory = "IMMUNESIGDB",k_lof = 30,
            core_pct = 0.9, k_graph = 15, dim_reduc_method="none", num_cores=num_cores,
            distance="correlation"),


UMAP_GEDO = gedo(data = rna_seq_data, diag = diag, reference_group = "Control",
            category = "C7",subcategory = "IMMUNESIGDB",k_lof = 30,
            core_pct = 0.9, k_graph = 15, dim_reduc_method="umap", ncomp = 10,
            dim_reduc_dist_method = "correlation", num_cores=num_cores,
            distance="euclidean"),
  
PCA1 = compute_module_matrix(method="pca1", data=rna_seq_data, 
  diag=diag, 
  reference_group="Control",
  category="C7",
  subcategory = "IMMUNESIGDB",
  num_cores=num_cores),
  

MEAN_Z_SCORES = compute_module_matrix(method="mean_z_score", 
  data=rna_seq_data, 
  diag=diag, 
  reference_group="Control",
  category="C7",
  subcategory = "IMMUNESIGDB",
  num_cores=num_cores),
  
iterations = 3,
check = F
)
saveRDS(bench_result, file=paste0(folder_for_res, "benchmark_time.rds"))
}
results_tib <- as_tibble(bench_result)
results_long <- results_tib %>%
  unnest(cols = time) %>%
  mutate(minutes = as.numeric(time, units = "mins")) %>%
  mutate(minutes = as.numeric(time) / 60)

summary_stats <- data.table(results_long %>%
  group_by(expression) %>%
  summarise(
    median_minutes = median(minutes),
    mean_minutes = mean(minutes),
    sd_minutes = sd(minutes),
    se_minutes = sd_minutes / sqrt(n())
  ))
summary_stats$expression = factor(names(matrix_list), levels = names(matrix_list))


plot = ggplot(summary_stats, aes(x = expression, y = median_minutes)) +
  geom_bar(stat = "identity", fill = "white", color = "black", width = 0.6) + 
  geom_errorbar(aes(ymin = median_minutes - se_minutes, ymax = median_minutes + se_minutes),width = 0.2, color = "black") +
  labs(x = "Methods",
       y = "Time (minutes)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot)
ggsave(plot,file=paste0(folder_for_res, "benchmark_res.pdf"))

```

# 15. Session information, Packages and versions

```{r session info}

devtools::session_info()

```
